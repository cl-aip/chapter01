(+ 3 4) => 7
(+ 3 (* 2 4)) => 11

(+ 3 (* 2 2)) => 7

3 => 3
-3 => -3
3.14 => 3.14
pi => 3.141592653589793d0 ; it depends on each machine type and lisp system.
t => t
nil => nil
most-positive-fixnum => 1152921504606846975  ;implementation dependent
most-negative-fixnum => -1152921504606846976 ;implementation dependent

short-float-epsilon  => 5.960465e-8            ;implementation dependent
single-float-epsilon => 5.960465e-8            ;implementation dependent
double-float-epsilon => 1.1102230246251568d-16 ;implementation dependent
long-float-epsilon   => 1.1102230246251568d-16 ;implementation dependent
(not (= (float 1 short-float-epsilon)
        (+ (float 1 short-float-epsilon) short-float-epsilon)))
 => t

(max 2 3 4) => 4
(min 2 3 4) => 2
(/ (+ 3 1) (- 3 1)) => 2
(sin pi) => 1.2246467991473532d-16
(cos pi) => -1.0d0

'(cos pi)         => (cos pi)
(quote (cos pi))  => (cos pi)
'(this is quoted) => (this is quoted)
(quote (quoted))  => (quoted)
'quote            => quote
(quote quote)     => quote
'3.14             => 3.14
'pi               => pi

(first '(lisp is a language for AI)) => lisp
(car '(lisp is a language for AI))   => lisp
(rest '(lisp is a language for AI))  => (is a language for AI)
(cdr '(lisp is a language for AI))   => (is a language for AI)
(first '((head) and tail))           => (head)
(rest '((head) and tail))            => (and tail)

foo             ; Error happens
(setq foo 'bar) => bar
foo             => bar

(setq list '(a b c)) => (a b c)
list                 => (a b c)
'list                => list
(car list)           => a
(cdr list)           => (b c)

(cons 'lisp '(is a language))             => (lisp is a language)
(setq list '(lisp is a language))         => (lisp is a language)
(cons (first list) (rest list))           => (lisp is a language)

(list 'lisp 'is 'a 'language)             => (lisp is a language)
(setq list (list 'lisp 'is 'a 'language)) => (lisp is a language)
list                                      => (lisp is a language)
(append list '(for AI))                   => (lisp is a language for AI)

'()                               => nil
()                                => nil
(setq list '(lisp is a language)) => (lisp is a language)
(rest (rest (rest list)))         => (language)
(rest (rest (rest (rest list))))  => nil

(car '(nil))  => nil
(car '())     => nil
(car '(( )))  => nil

(last '(a b c))       => (c)
(last '((a b) (c d))) => ((c d))
(butlast '(a b c))    => (a b)

(nth 2 '(a b c d))       => c
(nthcdr 2 '(a b c d))    => (c d)
(length '(a b c d))      => 4
(length '((a b)))        => 1
(reverse '(a b c d))     => (d c b a)
(reverse '((a b) (c d))) => ((c d) (a b))

(setq *db*
'((北海道  札幌市)
  (青森県  青森市)
  (岩手県  盛岡市)
  (宮城県  仙台市)
  (秋田県  秋田市)
  (山形県  山形市)
  (福島県  福島市)
  (茨城県  水戸市)
  (栃木県  宇都宮市)
  (群馬県  前橋市)
  (埼玉県  さいたま市)
  (千葉県  千葉市)
  (東京都  新宿区)
  (神奈川県  横浜市)
  (新潟県  新潟市)
  (富山県  富山市)
  (石川県  金沢市)
  (福井県  福井市)
  (山梨県  甲府市)
  (長野県  長野市)
  (岐阜県  岐阜市)
  (静岡県  静岡市)
  (愛知県  名古屋市)
  (三重県  津市)
  (滋賀県  大津市)
  (京都府  京都市)
  (大阪府  大阪市)
  (兵庫県  神戸市)
  (奈良県  奈良市)
  (和歌山県  和歌山市)
  (鳥取県  鳥取市)
  (島根県  松江市)
  (岡山県  岡山市)
  (広島県  広島市)
  (山口県  山口市)
  (徳島県  徳島市)
  (香川県  高松市)
  (愛媛県  松山市)
  (高知県  高知市)
  (福岡県  福岡市)
  (佐賀県  佐賀市)
  (長崎県  長崎市)
  (熊本県  熊本市)
  (大分県  大分市)
  (宮崎県  宮崎市)
  (鹿児島県  鹿児島市)
  (沖縄県  那覇市)
 ))
  => ((岩手県 盛岡市) (宮城県 仙台市) (秋田県 秋田市) ...)
(assoc '神奈川県 *db*)        => (神奈川県  横浜市)
(cadr (assoc '神奈川県 *db*)) => 横浜市

(eql "横浜市" "横浜市") => nil
(eql '横浜市  '横浜市)  => t

(setq *db2* 
      (loop for (key val) in *db* 
      collect `(,(string key) ,(string val))))
 => (("岩手県" "盛岡市") ("宮城県" "仙台市") ("秋田県" "秋田市") ...)
 (assoc "神奈川県" *db2* :test #'string=) => ("神奈川県" "横浜市")
 
 (/ 1 3)          => 1/3
 1/3              => 1/3
 (+ 1/3 1/3 1/3)  => 1
 (/ 22 7)         => 22/7
 (round (/ 22 7)) => 3 and 1/7